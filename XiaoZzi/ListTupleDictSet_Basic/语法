list[]
append() 总是把新的元素添加到list的尾部
insert() 接收两个参数，第一个参数是索引号，第二个参数是待添加的新元素
pop() 默认删除最后一个元素，也可以接收一个参数，索引号
修改：直接根据所以赋值

tuple()
没有append，insert pop，也不能修改，不可改变
t = (1,)  创建一个只有一个元素的tuple
t = (1) 创建一个tuple，里面有1这个元素
t = (1, 2, 3,) 多元素加不加逗号效果一样
t = ('a', 'b', ['A', 'B'])  tuple一开始指向的list并没有改成别的list，所以，tuple所谓的“不变”是说，
                            tuple的每个元素，指向永远不变。即指向'a'，就不能改成指向'b'，指向一个list，
                            就不能改成指向其他对象，但指向的这个list本身是可变的
t = ('a', 'b', ('A', 'B'))  t[2][0]不可改变，t不可改变

dict{}
dict{key:value,key:value}    可以简单通过d[key]的形式来查找对应的value
判断key是否存在，用in操作符，或者dict本身提供的get方法，在key存在时返回value，不存在时返回None
dict特点：
1.查找速度快，无论有10个还是10万个元素，查找的速度都是一样，而list的查找速度随着元素增加而下降
2.占用内存大，会浪费很多内容，list正好相反，占用内存小，但是查找速度慢
3.按照key查找，所以，在一个dict中，key不能重复
4.存储的key-value序对是没有顺序的，和list不一样，不同机器打印的顺序都可能不同，不能用dict存储有序的集合
5.dict的第三个特点是作为 key 的元素必须不可变，Python的基本类型如字符串、整数、浮点数都是不可变的，
  都可以作为 key。但是list是可变的，就不能作为 key。
更新dict:
d[key] = 72
删除：
要删除一个key，用pop(key)方法，对应的value也会从dict中删除
循环遍历：
for key,v in d.items():
    print key,':',v

set([])
set 持有一系列元素,无序的，不可重复的
>>> s = set(['A', 'B', 'C', 'C'])
>>> print s
set(['A', 'C', 'B'])
添加：s.add(),如果已经存在，add()不会报错，但是不会加进去
删除：s.remove（）,如果不存在会报错