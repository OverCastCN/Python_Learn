一、文件概念：
Python：文件是对象
Linux:一切设备都可以看成文件，例如磁盘文件、管道、网络Socket，外设等
文件属性：用户，读，写，执行

二、文件打开方式
方法：open(name[,mode[buf]])
name:文件路径
mode:打开方式，默认只读'r'
    1.'r'只读方式打开，文件必须存在
    2.'w'只写方式打开，文件不存在创建文件，文件存在则覆盖整个文件
    3.'a'追加方式打开，文件不存在创建文件，文件存在则向文件追加内容
    4.'r+'可读可写 不会创建不存在的文件 如果直接写文件，则从顶部开始写，覆盖之前此位置的内容，
       如果先读后写，则会在文件最后追加内容----追加什么，会报错啊IOError: [Errno 0] Error
    5.'w+'可读可写 如果文件存在 则覆盖整个文件不存在则创建----好像读不到啊！
    6.'a+'追加和读写方式打开， 可读可写 从文件顶部读取内容 从文件底部添加内容 不存在则创建
       ----读写一起进行也是会报错滴！！！
    注意：
    r+为可读写两种操作    w+为可读写两种操作（会首先自动清空文件内容）     a+为追加读写两种操作
【注意以上三种操作方式均不可同时进行读写操作（仅测验windows情况下）】
 如以r+为例子：
（1）读  然后 写  错误
（2）写  然后 读  乱码存入（此处乱码指需要编码的代码）
（3）写  然后 写入硬盘 然后读  从顶部开始写 会覆盖之前此位置的内容
buf：缓冲buffering的大小
【注意】
在读写交替过程中必须要有fflush, fseek, fsetpos, rewind这类操作，不然python就不知道当前文件位置在哪啦。
最笨的办法就是在关闭文件前只做读或者写一种操作，省心

三、文件读写操作
文件读取方式：
    1.read([size]):读取文件，读取size个字节，默认读取全部
    2.readline([siza]):读取一行
    3.readlines([size]):读取文件，返回每一行所组成的列表，读大文件很占内存
文件写入方式：
    1.write(str):将字符串写入文件
    2.writelines(sequence_of_strings):写多行到文件，sequence_of_strings为字符串组成的列表

四、文件指针



五、文件对象属性



六、linux文件系统


七、OS模块文件操作